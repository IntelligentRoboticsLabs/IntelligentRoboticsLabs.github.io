import React, {FunctionComponent} from "react";
import Layout from "../components/layout";
import {graphql} from "gatsby";
import {Post} from "../utils/models";
import Subheader from "../components/subheader";
import SEO from "../components/seo";
import PostGrid from "../components/post-grid";
import {Card} from "../components/card";
import Theme from "../styles/theme";
import styled from "styled-components";
import {Container, Grid} from "../components/common";

interface ProjectsPageProps {
  data: {
    allPosts: {
      edges: Array<{ node: Post }>;
    };
  };
  location: Location;
}

const PostsContainer = styled(Grid)`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-areas: "latest latest" ". .";
  width: 80%;
  margin-left: auto;
  margin-right: auto;
  margin-top: 2px;

  @media (max-width: ${Theme.breakpoints.sm}) {
    display: block;
    padding: 0;

    article {
      margin-bottom: 30px;
    }
  }
`;

const ProjectsPage: FunctionComponent<ProjectsPageProps> = ({data, location}) => {
  const posts = data.allPosts.edges.map(node => node.node) as Post[];

  return (
    <Layout bigHeader={true}>
      <SEO
        location={location}
        title={`Projects`}
        type={`Series`}
      />
      <PostsContainer>
        {posts.map((post, index) => (
              <Card
                title={post.frontmatter.title}
                path={post.frontmatter.path}
                featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}
                content={post.frontmatter.excerpt}
                key={index}
                meta={
                  {
                    time: post.frontmatter.created,
                    timePretty: post.frontmatter.createdPretty,
                    tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,
                  }
                }
                style={{gridArea: index === 0 ? 'latest' : undefined}}
                halfImage={index === 0}
              />
            ))}
      </PostsContainer>
    </Layout>
  );
};

export default ProjectsPage;

export const query = graphql`
  query {
    allPosts: allMarkdownRemark(
        filter: { fileAbsolutePath: { regex: "/(posts)/projects/.*\\\\.md$/" } }
        sort: { fields: frontmatter___created, order: DESC }
      ) {
        edges {
          node {
            id
            frontmatter {
              title
              path
              tags
              excerpt
              created
              createdPretty: created(formatString: "DD MMMM, YYYY")
              featuredImage {
                childImageSharp {
                  sizes(maxWidth: 500, quality: 100) {
                    base64
                    aspectRatio
                    src
                    srcSet
                    sizes
                  }
                }
              }
            }
          }
        }
      }
  }
`;
